/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import data.Time;
import java.awt.Color;
import java.awt.GraphicsConfiguration;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.print.event.PrintJobEvent;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import util.ButtonListener;
import util.QuizAppConnection;

/**
 *
 * @author Phi
 */
public class Puzzle extends javax.swing.JFrame {

    /**
     * Creates new form Puzzle
     */
    private int row;
    private int column;
    private JButton a[][];
    Thread threadTime;
    Time time;
    JButton preButton;
    int turn = 0;
    CreatePuzzle preForm;

    public Puzzle(int row, int column) throws HeadlessException {
        initComponents();
        this.setTitle("Puzzle Game");
        this.setTxtTurn();
        this.setLocationRelativeTo(null);
        this.row = row;
        this.column = column;
        time = new Time();
        time.setjLabel(txtTime);
        threadTime = new Thread(time);
        puzzlePanel.setLayout(new GridLayout(row, column));
        a = new JButton[row][column];
        do {
            int random[][] = random(row, column, 1000);
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < column; j++) {
                    String text = random[i][j] == 0 ? "" : random[i][j] + "";
                    a[i][j] = new JButton(text);
                    a[i][j].addActionListener(new ButtonListener(i, j, a, this));
                    puzzlePanel.add(a[i][j]);
                }
            }
        } while (isWinner());
        threadTime.start();
        preButton = null;
        MainApp.puzzle = this;
    }

//    public Puzzle(int row, int column, GraphicsConfiguration gc) {
//        super(gc);
//        this.row = row;
//        this.column = column;
//    }

    public JButton getPreButton() {
        return preButton;
    }

    public void setPreButton(JButton preButton) {
        this.preButton = preButton;
    }

    public int getRow() {
        return row;
    }

    public void setRow(int row) {
        this.row = row;
    }

    public int getColumn() {
        return column;
    }

    public void setColumn(int column) {
        this.column = column;
    }

    public void resetPreButton() {
        preButton.setBackground(Color.LIGHT_GRAY);
        preButton = null;
    }

    public Thread getThreadTime() {
        return threadTime;
    }

    public void setThreadTime(Thread threadTime) {
        this.threadTime = threadTime;
    }

    public int getTurn() {
        return turn;
    }

    public void setTurn(int turn) {
        this.turn = turn;
    }

    public void setTxtTurn() {
        txtTurn.setText("Your turn: " + turn);
    }

    public CreatePuzzle getPreForm() {
        return preForm;
    }

    public void setPreForm(CreatePuzzle preForm) {
        this.preForm = preForm;
    }

    public void congrugationWinner() {
        time.setIsRun(false);
        txtStatus.setText("You are winner!!!");
        QuizAppConnection.putRecord(row, column, time.getTime());
        int option = JOptionPane.showConfirmDialog(null, "Do you want continue?", "",JOptionPane.YES_OPTION);
        if (option == JOptionPane.NO_OPTION) {
            System.exit(0);
        } else {
            this.setVisible(false);
            preForm.setVisible(true);
        }
        
    }

    public Puzzle() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        puzzlePanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtTime = new javax.swing.JLabel();
        txtStatus = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtTurn = new javax.swing.JLabel();
        btnAnswer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        puzzlePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        puzzlePanel.setForeground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout puzzlePanelLayout = new javax.swing.GroupLayout(puzzlePanel);
        puzzlePanel.setLayout(puzzlePanelLayout);
        puzzlePanelLayout.setHorizontalGroup(
            puzzlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 625, Short.MAX_VALUE)
        );
        puzzlePanelLayout.setVerticalGroup(
            puzzlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        txtTime.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        txtTime.setForeground(new java.awt.Color(255, 51, 51));
        txtTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTime.setText("00:00");

        txtStatus.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        txtStatus.setForeground(new java.awt.Color(51, 0, 255));
        txtStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(txtStatus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTime, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtStatus)
                .addContainerGap(130, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));

        txtTurn.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtTurn.setForeground(new java.awt.Color(255, 0, 102));
        txtTurn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTurn.setText("Your Turn: 0");

        btnAnswer.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnAnswer.setForeground(new java.awt.Color(255, 102, 102));
        btnAnswer.setText("Answer Questions");
        btnAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnswerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTurn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(txtTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(puzzlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addComponent(puzzlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnswerActionPerformed
        // TODO add your handling code here:
        MainApp app = new MainApp();
        app.setVisible(true);
    }//GEN-LAST:event_btnAnswerActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Puzzle(2, 2).setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnswer;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel puzzlePanel;
    private javax.swing.JLabel txtStatus;
    private javax.swing.JLabel txtTime;
    private javax.swing.JLabel txtTurn;
    // End of variables declaration//GEN-END:variables

    private int[][] random(int row, int col, int move) {
        int arr[][] = new int[row][col];
        int index = 1;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                arr[i][j] = index++;
            }
        }
        arr[row - 1][col - 1] = 0;
        int i = 0, currentI = row - 1, currentJ = col - 1;
        while (i++ != move) {
            long randomTmp = 1 + Math.round(Math.random() * 3);
            int tmp = (int) randomTmp;
            // 1 left 2 right 3 up 4 down
            int temp;
            switch (tmp) {
                case 1:
                    if (currentJ > 0) {
                        temp = arr[currentI][currentJ - 1];
                        arr[currentI][currentJ - 1] = arr[currentI][currentJ];
                        arr[currentI][currentJ] = temp;
                        currentJ--;
                    } else {
                        i--;
                    }
                    break;
                case 2:
                    if (currentJ + 1 < col) {
                        temp = arr[currentI][currentJ + 1];
                        arr[currentI][currentJ + 1] = arr[currentI][currentJ];
                        arr[currentI][currentJ] = temp;
                        currentJ++;
                    } else {
                        i--;
                    }
                    break;
                case 3:
                    if (currentI > 0) {
                        temp = arr[currentI - 1][currentJ];
                        arr[currentI - 1][currentJ] = arr[currentI][currentJ];
                        arr[currentI][currentJ] = temp;
                        currentI--;
                    } else {
                        i--;
                    }
                    break;
                case 4:
                    if (currentI + 1 < row) {
                        temp = arr[currentI + 1][currentJ];
                        arr[currentI + 1][currentJ] = arr[currentI][currentJ];
                        arr[currentI][currentJ] = temp;
                        currentI++;
                    } else {
                        i--;
                    }
                    break;
            }
        }
        return arr;
    }

    public boolean isWinner() {
        boolean check = true;
        int index = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                if (i != row - 1 || j != column - 1) {
                    if (a[i][j].getText().equalsIgnoreCase("")) {
                        return false;
                    }
                    if (Integer.parseInt(a[i][j].getText()) != ++index) {
                        System.out.println(index - 1);
                        check = false;
                        break;
                    }
                }
            }
            if (check == false) {
                break;
            }
        }
        return check;
    }
}
